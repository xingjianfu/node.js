# node.js

--use_strict 使用严格模式

VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件


在浏览器中，叫window对象。而在Node.js环境中，也有唯一的全局对象，但不叫window，而叫global

全局属性
global.console

global.process

如果我们想要在下一次事件响应中执行代码，可以调用process.nextTick()

Node.js进程本身的事件就由process对象来处理。如果我们响应exit事件，就可以在程序即将退出时执行某个回调函数：// 程序即将退出时的回调函数:
process.on('exit', function (code) {
    console.log('about to exit with code: ' + code);
});

从文件中读取的是buffer,转化为字符串 buffer.toString()


// String -> Buffer
var buf = new Buffer(text, 'utf-8');
console.log(buf);


如果传入的数据是String，默认按UTF-8编码写入文本文件，如果传入的参数是Buffer，则写入的是二进制文件


如果我们要获取文件大小，创建时间等信息，可以使用fs.stat()，它返回一个Stat对象，能告诉我们文件或目录的详细信息：


stream
data事件表示流的数据已经可以读取了，end事件表示这个流已经到末尾了，没有数据可以读取了，error事件表示出错了


rs.on('data', function (chunk) {
    console.log('DATA:')
    console.log(chunk);
});


buffer用于存储二进制数据
buffer.write 写入缓冲区，buffer.toString()从缓冲区当中读取

buf.toJSON() 转化为json


注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。
